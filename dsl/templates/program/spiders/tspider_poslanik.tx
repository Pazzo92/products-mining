import scrapy
import re
import unicodedata
{% for type in model.productType %}
{% if type.name == model_main.query.productType %}
import products.spiders.{{type.name.lower()}}_type as custom_module
from products.items import {{type.name}}
class {{type.name}}Spider(scrapy.Spider):
	name = "{{type.name.lower()}}"
	
# start page
	def start_requests(self):
		url = "http://www.otvoreniparlament.rs/poslanik"
		return [scrapy.Request(url, callback=self.container_page)]
		
# function that finds all the records
	def container_page(self,response):
		links = response.xpath("//*/h3[@class='card-title']/a/@href").extract()
		for link in links:
			yield scrapy.Request(link, callback = self.main_page)
			
# function that enters record needed
	def main_page(self,response):	
		links = response.xpath("//*/h4[@class='media-heading']/a/@href").extract()
		for link in links:
			yield scrapy.Request(link)
			
# main function that parses single entity		
	def parse(self,response):
		{{type.name.lower()}} = {{type.name}}()
		properties_list = []
		aliases_dict = {}
		{% for prop in type.properties %}
		{% if prop.selector != None %}
		{{prop.name}} = response.css("{{prop.selector.value}}")
		if "{{type.name}}_{{prop.name}}" in dir(custom_module):
			{{type.name.lower()}}['{{prop.name}}']= getattr(custom_module, '{{type.name}}_{{prop.name}}')({{prop.name}})
		else:
			{{type.name.lower()}}['{{prop.name}}'] = {{prop.name}}.extract_first()
		{% else %}		
		properties_list.append('{{prop.name.lower()}}')
		aliases = []
		{% for alias in prop.aliases.alias %}
		aliases.append('{{alias}}')
		{% endfor %}
		aliases_dict['{{prop.name.lower()}}'] = aliases
		{% endif %}
		{% endfor %}

		{% if type.table != None %}
		
		table = response.css("{{type.table.tag.value}}")
		for row in table.css("{{type.table.row.value}}"):
			name = getattr(custom_module, 'Table_name')(row)
			value = getattr(custom_module, 'Table_value')(row)

			if name is not None:
				name = unicodedata.normalize('NFD', name).encode('ascii', 'ignore').decode('utf-8')
			
			for property in properties_list:
				if property == name.lower() or name.lower().replace(' ','_') in aliases_dict[property]:
					{{type.name.lower()}}[property] = re.sub(r'[^a-zA-Z0-9.\-"ČĆĐŠŽžšđćč ]',r'',value.strip())
				elif '_' in property:
					if property == name.lower().replace(' ','_'):
						{{type.name.lower()}}[property] = re.sub(r'[^a-zA-Z0-9.\-"ČĆĐŠŽžšđćč ]',r'',value.strip())
		{% endif %}
		yield {{type.name.lower()}}
			
{% endif %}
{% endfor %}			
