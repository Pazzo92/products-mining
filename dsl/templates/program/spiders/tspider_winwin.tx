import scrapy
from products.items import {{model.productType.name}}
import re
import unicodedata

class Winwin{{model.productType.name}}Spider(scrapy.Spider):
	name = "winwin_{{model.productType.name}}"
	
	def start_requests(self):
		url = self.winwin_dictionary('{{model.productType.name.lower()}}')
		return [scrapy.Request(url, callback=self.parse_links)]
		
	def parse_links(self,response):
		links = response.xpath("//*/h2[@class='product-name']/a/@href").extract()
		for link in links:
			yield scrapy.Request(link)	
		
		next_page = response.xpath("//*/a[@class='next i-next']/@href").extract_first()
		if next_page is not None:
			yield scrapy.Request(next_page, callback=self.parse_links)
		
	def parse(self,response):
		
		{{model.productType.name.lower()}} = {{model.productType.name}}()
		
		properties_list = []
		{% for prop in model.productType.properties %}
		{% if prop.lower() == 'cena' %}
		{{model.productType.name.lower()}}['{{prop}}'] = response.css('div.price-box span.price::text').extract_first().strip()[:-5].replace(".","")
		{% elif prop.lower() == 'naziv' or prop.lower() == 'ime' %}
		{{model.productType.name.lower()}}['{{prop}}'] = response.css('h1::text').extract_first()
		{% else %}
		properties_list.append('{{prop.lower()}}')
		{% endif %}
		{% endfor %}
		
		table = response.css('div.product-panels-content table.data-table')
		for tr in table.css('tr'):
			name = tr.css('th::text').extract_first().strip()
			value = tr.css('td::text').extract_first()
			
			value = unicodedata.normalize('NFD', value).encode('ascii', 'ignore')
			name = unicodedata.normalize('NFD', name).encode('ascii', 'ignore')
			
			for property in properties_list:
				if property == name.lower():
					{{model.productType.name.lower()}}[property] = re.sub(r'[^a-zA-Z0-9.\- ]',r'',value.strip())
				elif property in name.lower() and {{model.productType.name.lower()}}[property]!= '':
					{{model.productType.name.lower()}}[property] = re.sub(r'[^a-zA-Z0-9.\- ]',r'',value.strip())
				elif '_' in property:
					if property == name.lower().replace(' ','_'):
						{{model.productType.name.lower()}}[property] = re.sub(r'[^a-zA-Z0-9.\- ]',r'',value.strip())
		
		yield {{model.productType.name.lower()}}
					
	def winwin_dictionary(self, x):
			return {
			'laptop': 'https://www.winwin.rs/laptop-i-tablet-racunari/laptop-notebook-racunari.html'
			}.get(x, '')  